// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './api-types';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CreateRequestQuery": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            },
            "required": [
                "token"
            ],
            "additionalProperties": false
        },
        "CreateRequestBody": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "number"
                }
            },
            "required": [
                "budget"
            ],
            "additionalProperties": false
        },
        "AddRequestQuery": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "spreadsheetId": {
                    "type": "string"
                }
            },
            "required": [
                "token",
                "spreadsheetId"
            ],
            "additionalProperties": false
        },
        "AddRequestBody": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "isoDate": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "url": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "meta": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "checking",
                                "checked"
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "type"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "amount",
                "currency",
                "isoDate",
                "memo",
                "meta",
                "to",
                "url"
            ]
        },
        "AddResponseBody": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean",
                    "const": true
                }
            },
            "required": [
                "ok"
            ],
            "additionalProperties": false
        },
        "GetRequestQuery": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "spreadsheetId": {
                    "type": "string"
                }
            },
            "required": [
                "token",
                "spreadsheetId"
            ],
            "additionalProperties": false
        },
        "SpreadSheetItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "amount": {
                    "type": "object",
                    "properties": {
                        "number": {
                            "type": "number"
                        },
                        "value": {
                            "type": "string"
                        },
                        "raw": {
                            "type": "number"
                        },
                        "inputCurrency": {
                            "type": "string"
                        },
                        "outputCurrency": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "number",
                        "value",
                        "raw",
                        "inputCurrency",
                        "outputCurrency"
                    ],
                    "additionalProperties": false
                },
                "url": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "meta": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "checking",
                                "checked"
                            ]
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "id",
                "date",
                "to",
                "amount",
                "url",
                "memo",
                "meta"
            ],
            "additionalProperties": false
        },
        "SpreadSheetStats": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "object",
                    "properties": {
                        "raw": {
                            "type": "number"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "raw",
                        "value"
                    ],
                    "additionalProperties": false
                },
                "used": {
                    "type": "object",
                    "properties": {
                        "raw": {
                            "type": "number"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "raw",
                        "value"
                    ],
                    "additionalProperties": false
                },
                "balance": {
                    "type": "object",
                    "properties": {
                        "raw": {
                            "type": "number"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "raw",
                        "value"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "budget",
                "used",
                "balance"
            ],
            "additionalProperties": false
        },
        "GetResponseBody": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "year": {
                        "type": "string"
                    },
                    "README": {
                        "type": "string"
                    },
                    "stats": {
                        "$ref": "#/definitions/SpreadSheetStats"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/SpreadSheetItem"
                        }
                    }
                },
                "required": [
                    "year",
                    "README",
                    "stats",
                    "items"
                ],
                "additionalProperties": false
            }
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateCreateRequestQuery(payload: unknown): apiTypes.CreateRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.CreateRequestQuery } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/CreateRequestQuery");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid CreateRequestQuery: ' + ajv.errorsText(validator.errors, {dataVar: "CreateRequestQuery"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isCreateRequestQuery(payload: unknown): payload is apiTypes.CreateRequestQuery {
  try {
    validateCreateRequestQuery(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateCreateRequestBody(payload: unknown): apiTypes.CreateRequestBody {
  /** Schema is defined in {@link SCHEMA.definitions.CreateRequestBody } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/CreateRequestBody");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid CreateRequestBody: ' + ajv.errorsText(validator.errors, {dataVar: "CreateRequestBody"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isCreateRequestBody(payload: unknown): payload is apiTypes.CreateRequestBody {
  try {
    validateCreateRequestBody(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateAddRequestQuery(payload: unknown): apiTypes.AddRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.AddRequestQuery } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/AddRequestQuery");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid AddRequestQuery: ' + ajv.errorsText(validator.errors, {dataVar: "AddRequestQuery"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isAddRequestQuery(payload: unknown): payload is apiTypes.AddRequestQuery {
  try {
    validateAddRequestQuery(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateAddRequestBody(payload: unknown): apiTypes.AddRequestBody {
  /** Schema is defined in {@link SCHEMA.definitions.AddRequestBody } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/AddRequestBody");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid AddRequestBody: ' + ajv.errorsText(validator.errors, {dataVar: "AddRequestBody"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isAddRequestBody(payload: unknown): payload is apiTypes.AddRequestBody {
  try {
    validateAddRequestBody(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateAddResponseBody(payload: unknown): apiTypes.AddResponseBody {
  /** Schema is defined in {@link SCHEMA.definitions.AddResponseBody } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/AddResponseBody");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid AddResponseBody: ' + ajv.errorsText(validator.errors, {dataVar: "AddResponseBody"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isAddResponseBody(payload: unknown): payload is apiTypes.AddResponseBody {
  try {
    validateAddResponseBody(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateGetRequestQuery(payload: unknown): apiTypes.GetRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.GetRequestQuery } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/GetRequestQuery");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid GetRequestQuery: ' + ajv.errorsText(validator.errors, {dataVar: "GetRequestQuery"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isGetRequestQuery(payload: unknown): payload is apiTypes.GetRequestQuery {
  try {
    validateGetRequestQuery(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateSpreadSheetItem(payload: unknown): apiTypes.SpreadSheetItem {
  /** Schema is defined in {@link SCHEMA.definitions.SpreadSheetItem } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/SpreadSheetItem");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid SpreadSheetItem: ' + ajv.errorsText(validator.errors, {dataVar: "SpreadSheetItem"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isSpreadSheetItem(payload: unknown): payload is apiTypes.SpreadSheetItem {
  try {
    validateSpreadSheetItem(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateSpreadSheetStats(payload: unknown): apiTypes.SpreadSheetStats {
  /** Schema is defined in {@link SCHEMA.definitions.SpreadSheetStats } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/SpreadSheetStats");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid SpreadSheetStats: ' + ajv.errorsText(validator.errors, {dataVar: "SpreadSheetStats"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isSpreadSheetStats(payload: unknown): payload is apiTypes.SpreadSheetStats {
  try {
    validateSpreadSheetStats(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateGetResponseBody(payload: unknown): apiTypes.GetResponseBody {
  /** Schema is defined in {@link SCHEMA.definitions.GetResponseBody } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/GetResponseBody");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid GetResponseBody: ' + ajv.errorsText(validator.errors, {dataVar: "GetResponseBody"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isGetResponseBody(payload: unknown): payload is apiTypes.GetResponseBody {
  try {
    validateGetResponseBody(payload);
    return true;
  } catch (error) {
    return false;
  }
}
