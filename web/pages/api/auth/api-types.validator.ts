// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './api-types';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/AuthorizedRequestQuery",
    "definitions": {
        "AuthorizedRequestQuery": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                }
            },
            "required": [
                "state",
                "code"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateAuthorizedRequestQuery(payload: unknown): apiTypes.AuthorizedRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.AuthorizedRequestQuery } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/AuthorizedRequestQuery");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid AuthorizedRequestQuery: ' + ajv.errorsText(validator.errors, {dataVar: "AuthorizedRequestQuery"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isAuthorizedRequestQuery(payload: unknown): payload is apiTypes.AuthorizedRequestQuery {
  try {
    validateAuthorizedRequestQuery(payload);
    return true;
  } catch (error) {
    return false;
  }
}
