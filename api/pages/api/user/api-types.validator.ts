// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './api-types';

const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CreateUserRequestBody": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "budget": {
                    "type": "number"
                }
            },
            "required": [
                "id",
                "name",
                "budget"
            ],
            "additionalProperties": false
        },
        "UpdateUserRequestBody": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "budget": {
                    "type": "number"
                }
            },
            "required": [
                "id",
                "name",
                "budget"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateCreateUserRequestBody(payload: unknown): apiTypes.CreateUserRequestBody {
  if (!isCreateUserRequestBody(payload)) {
  　const error = new Error('invalid payload: CreateUserRequestBody');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isCreateUserRequestBody(payload: unknown): payload is apiTypes.CreateUserRequestBody {
  /** Schema is defined in {@link SCHEMA.definitions.CreateUserRequestBody } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/CreateUserRequestBody" });
  return ajvValidate(payload);
}

export function validateUpdateUserRequestBody(payload: unknown): apiTypes.UpdateUserRequestBody {
  if (!isUpdateUserRequestBody(payload)) {
  　const error = new Error('invalid payload: UpdateUserRequestBody');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isUpdateUserRequestBody(payload: unknown): payload is apiTypes.UpdateUserRequestBody {
  /** Schema is defined in {@link SCHEMA.definitions.UpdateUserRequestBody } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/UpdateUserRequestBody" });
  return ajvValidate(payload);
}
