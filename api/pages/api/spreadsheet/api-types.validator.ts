// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './api-types';

const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CreateRequestQuery": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            },
            "required": [
                "token"
            ],
            "additionalProperties": false
        },
        "AddRequestQuery": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "spreadsheetId": {
                    "type": "string"
                }
            },
            "required": [
                "token",
                "spreadsheetId"
            ],
            "additionalProperties": false
        },
        "GetRequestQuery": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "spreadsheetId": {
                    "type": "string"
                }
            },
            "required": [
                "token",
                "spreadsheetId"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateCreateRequestQuery(payload: unknown): apiTypes.CreateRequestQuery {
  if (!isCreateRequestQuery(payload)) {
  　const error = new Error('invalid payload: CreateRequestQuery');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isCreateRequestQuery(payload: unknown): payload is apiTypes.CreateRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.CreateRequestQuery } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/CreateRequestQuery" });
  return ajvValidate(payload);
}

export function validateAddRequestQuery(payload: unknown): apiTypes.AddRequestQuery {
  if (!isAddRequestQuery(payload)) {
  　const error = new Error('invalid payload: AddRequestQuery');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isAddRequestQuery(payload: unknown): payload is apiTypes.AddRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.AddRequestQuery } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/AddRequestQuery" });
  return ajvValidate(payload);
}

export function validateGetRequestQuery(payload: unknown): apiTypes.GetRequestQuery {
  if (!isGetRequestQuery(payload)) {
  　const error = new Error('invalid payload: GetRequestQuery');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isGetRequestQuery(payload: unknown): payload is apiTypes.GetRequestQuery {
  /** Schema is defined in {@link SCHEMA.definitions.GetRequestQuery } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/GetRequestQuery" });
  return ajvValidate(payload);
}
